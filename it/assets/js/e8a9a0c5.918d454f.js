"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5877],{9613:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>k});var a=t(9496);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},p=Object.keys(e);for(a=0;a<p.length;a++)t=p[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)t=p[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var r=a.createContext({}),s=function(e){var n=a.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(r.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,p=e.originalType,r=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(t),m=i,k=c["".concat(r,".").concat(m)]||c[m]||u[m]||p;return t?a.createElement(k,o(o({ref:n},d),{},{components:t})):a.createElement(k,o({ref:n},d))}));function k(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var p=t.length,o=new Array(p);o[0]=m;var l={};for(var r in n)hasOwnProperty.call(n,r)&&(l[r]=n[r]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<p;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7076:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>k,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var a=t(1966),i=t(9836),p=(t(9496),t(9613)),o=["components"],l={id:"package_json",title:"package.json"},r=void 0,s={unversionedId:"package_json",id:"version-8.x/package_json",title:"package.json",description:"Il file manifesto di un pacchetto. Contiene tutti i metadati del pacchetto, comprese le dipendenze, il titolo, l'autore, eccetera. Questo \xe8 uno standard mantenuto in tutti i principali gestori di pacchetti Node.JS, incluso pnpm.",source:"@site/i18n/it/docusaurus-plugin-content-docs/version-8.x/package_json.md",sourceDirName:".",slug:"/package_json",permalink:"/it/package_json",draft:!1,editUrl:"https://translate.pnpm.io/project/pnpm/it",tags:[],version:"8.x",frontMatter:{id:"package_json",title:"package.json"},sidebar:"version-8.x/docs",previous:{title:"pnpm config",permalink:"/it/cli/config"},next:{title:".npmrc",permalink:"/it/npmrc"}},d={},c=[{value:"engines",id:"engines",level:2},{value:"dependenciesMeta",id:"dependenciesmeta",level:2},{value:"dependenciesMeta.*.injected",id:"dependenciesmetainjected",level:3},{value:"peerDependenciesMeta",id:"peerdependenciesmeta",level:2},{value:"peerDependenciesMeta.*.optional",id:"peerdependenciesmetaoptional",level:3},{value:"publishConfig",id:"publishconfig",level:2},{value:"publishConfig.executableFiles",id:"publishconfigexecutablefiles",level:3},{value:"publishConfig.directory",id:"publishconfigdirectory",level:3},{value:"publishConfig.linkDirectory",id:"publishconfiglinkdirectory",level:3},{value:"pnpm.overrides",id:"pnpmoverrides",level:2},{value:"pnpm.packageExtensions",id:"pnpmpackageextensions",level:2},{value:"pnpm.peerDependencyRules",id:"pnpmpeerdependencyrules",level:2},{value:"pnpm.peerDependencyRules.ignoreMissing",id:"pnpmpeerdependencyrulesignoremissing",level:3},{value:"pnpm.peerDependencyRules.allowedVersions",id:"pnpmpeerdependencyrulesallowedversions",level:3},{value:"pnpm.peerDependencyRules.allowAny",id:"pnpmpeerdependencyrulesallowany",level:3},{value:"pnpm.neverBuiltDependencies",id:"pnpmneverbuiltdependencies",level:2},{value:"pnpm.onlyBuiltDependencies",id:"pnpmonlybuiltdependencies",level:2},{value:"pnpm.allowedDeprecatedVersions",id:"pnpmalloweddeprecatedversions",level:2},{value:"pnpm.patchedDependencies",id:"pnpmpatcheddependencies",level:2},{value:"pnpm.allowNonAppliedPatches",id:"pnpmallownonappliedpatches",level:2},{value:"pnpm.updateConfig",id:"pnpmupdateconfig",level:2},{value:"pnpm.updateConfig.ignoreDependencies",id:"pnpmupdateconfigignoredependencies",level:3},{value:"pnpm.auditConfig",id:"pnpmauditconfig",level:2},{value:"pnpm.auditConfig.ignoreCves",id:"pnpmauditconfigignorecves",level:3},{value:"pnpm.requiredScripts",id:"pnpmrequiredscripts",level:2},{value:"resolutions",id:"resolutions",level:2}],u={toc:c},m="wrapper";function k(e){var n=e.components,t=(0,i.Z)(e,o);return(0,p.kt)(m,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,p.kt)("p",null,"Il file manifesto di un pacchetto. Contiene tutti i metadati del pacchetto, comprese le dipendenze, il titolo, l'autore, eccetera. Questo \xe8 uno standard mantenuto in tutti i principali gestori di pacchetti Node.JS, incluso pnpm."),(0,p.kt)("h2",{id:"engines"},"engines"),(0,p.kt)("p",null,"Puoi specificare la versione di Node e pnpm su cui funziona il tuo software:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "engines": {\n        "node": ">=10",\n        "pnpm": ">=3"\n    }\n}\n')),(0,p.kt)("p",null,"Durante lo sviluppo locale, pnpm fallir\xe0 sempre con un messaggio di errore se la sua versione non corrisponde a quella specificata nel campo ",(0,p.kt)("inlineCode",{parentName:"p"},"engine"),"."),(0,p.kt)("p",null,"A meno che l'utente non abbia impostato il flag di configurazione ",(0,p.kt)("inlineCode",{parentName:"p"},"engine-strict")," (vedi ",(0,p.kt)("a",{parentName:"p",href:"/it/npmrc#engine-strict"},".npmrc"),"), questo campo \xe8 solo consultivo e produrr\xe0 avvisi solo quando il tuo pacchetto \xe8 installato come dipendenza."),(0,p.kt)("h2",{id:"dependenciesmeta"},"dependenciesMeta"),(0,p.kt)("p",null,"Ulteriori informazioni meta utilizzate per le dipendenze dichiarate all'interno di ",(0,p.kt)("inlineCode",{parentName:"p"},"dependencies"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"optionalDependencies"),"e ",(0,p.kt)("inlineCode",{parentName:"p"},"devDependencies"),"."),(0,p.kt)("h3",{id:"dependenciesmetainjected"},"dependenciesMeta.*.injected"),(0,p.kt)("p",null,"Se questo \xe8 impostato su true per una dipendenza locale, il pacchetto sar\xe0 collegato alla cartella dei moduli, non collegato simbolicamente."),(0,p.kt)("p",null,"Ad esempio, il seguente ",(0,p.kt)("inlineCode",{parentName:"p"},"package.json")," in uno spazio di lavoro creer\xe0 un collegamento simbolico a ",(0,p.kt)("inlineCode",{parentName:"p"},"button")," nella cartella ",(0,p.kt)("inlineCode",{parentName:"p"},"node_modules")," di ",(0,p.kt)("inlineCode",{parentName:"p"},"card"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "card",\n  "dependencies": {\n    "button": "workspace:1.0.0"\n  }\n}\n')),(0,p.kt)("p",null,"Ma cosa succede se ",(0,p.kt)("inlineCode",{parentName:"p"},"button")," ha ",(0,p.kt)("inlineCode",{parentName:"p"},"react")," nelle sue dipendenze peer? Se tutti i progetti nel monorepo utilizzano la stessa versione di ",(0,p.kt)("inlineCode",{parentName:"p"},"react"),", nessun problema. Ma se ",(0,p.kt)("inlineCode",{parentName:"p"},"button")," \xe8 richiesto da ",(0,p.kt)("inlineCode",{parentName:"p"},"card")," che utilizza ",(0,p.kt)("inlineCode",{parentName:"p"},"react@16")," e ",(0,p.kt)("inlineCode",{parentName:"p"},"form")," con ",(0,p.kt)("inlineCode",{parentName:"p"},"react@17"),"? Senza usare ",(0,p.kt)("inlineCode",{parentName:"p"},"inject"),", dovresti scegliere una singola versione di ",(0,p.kt)("inlineCode",{parentName:"p"},"react")," e installarla come dipendenza dev di ",(0,p.kt)("inlineCode",{parentName:"p"},"button"),". Ma usando il campo ",(0,p.kt)("inlineCode",{parentName:"p"},"injected")," puoi iniettare ",(0,p.kt)("inlineCode",{parentName:"p"},"button")," in un pacchetto e ",(0,p.kt)("inlineCode",{parentName:"p"},"button")," verr\xe0 installato con la versione di ",(0,p.kt)("inlineCode",{parentName:"p"},"react")," di quel pacchetto."),(0,p.kt)("p",null,"Quindi questo sar\xe0 il ",(0,p.kt)("inlineCode",{parentName:"p"},"package.json")," di ",(0,p.kt)("inlineCode",{parentName:"p"},"card"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "card",\n  "dependencies": {\n    "button": "workspace:1.0.0",\n    "react": "16"\n  },\n  "dependenciesMeta": {\n    "button": {\n      "injected": true\n    }\n  }\n}\n')),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"button")," sar\xe0 collegato fisicamente alle dipendenze di ",(0,p.kt)("inlineCode",{parentName:"p"},"card")," e ",(0,p.kt)("inlineCode",{parentName:"p"},"react@16")," sar\xe0 collegato simbolicamente alle dipendenze di ",(0,p.kt)("inlineCode",{parentName:"p"},"card/node_modules/button"),"."),(0,p.kt)("p",null,"E questo sar\xe0 il ",(0,p.kt)("inlineCode",{parentName:"p"},"package.json")," di ",(0,p.kt)("inlineCode",{parentName:"p"},"form"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "form",\n  "dependencies": {\n    "button": "workspace:1.0.0",\n    "react": "17"\n  },\n  "dependenciesMeta": {\n    "button": {\n      "injected": true\n    }\n  }\n}\n')),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"button")," sar\xe0 collegato fisicamente alle dipendenze di ",(0,p.kt)("inlineCode",{parentName:"p"},"form")," e ",(0,p.kt)("inlineCode",{parentName:"p"},"react@17")," sar\xe0 collegato simbolicamente alle dipendenze di ",(0,p.kt)("inlineCode",{parentName:"p"},"form/node_modules/button"),"."),(0,p.kt)("p",null,"In contrast to normal dependencies, injected ones are not symlinked to the destination folder, so they are not updated automatically, e.g. after running the build script. To update the hard linked folder contents to the latest state of the dependency package folder, call ",(0,p.kt)("inlineCode",{parentName:"p"},"pnpm i")," again."),(0,p.kt)("p",null,"Note that the ",(0,p.kt)("inlineCode",{parentName:"p"},"button")," package must have any lifecycle script that runs on install in order for ",(0,p.kt)("inlineCode",{parentName:"p"},"pnpm")," to detect the changes and update it. For example, the package can be rebuilt on install: ",(0,p.kt)("inlineCode",{parentName:"p"},'"prepare": "pnpm run build"'),". Any script would work, even a simple unrelated command without side effects, like this: ",(0,p.kt)("inlineCode",{parentName:"p"},'"prepare": "pnpm root"'),"."),(0,p.kt)("h2",{id:"peerdependenciesmeta"},"peerDependenciesMeta"),(0,p.kt)("p",null,"This field lists some extra information related to the dependencies listed in the ",(0,p.kt)("inlineCode",{parentName:"p"},"peerDependencies")," field."),(0,p.kt)("h3",{id:"peerdependenciesmetaoptional"},"peerDependenciesMeta.*.optional"),(0,p.kt)("p",null,"If this is set to true, the selected peer dependency will be marked as optional by the package manager. Therefore, the consumer omitting it will no longer be reported as an error."),(0,p.kt)("p",null,"Ad esempio:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "peerDependencies": {\n        "foo": "1"\n    },\n    "peerDependenciesMeta": {\n        "foo": {\n            "optional": true\n        },\n        "bar": {\n            "optional": true\n        }\n    }\n}\n')),(0,p.kt)("p",null,"Note that even though ",(0,p.kt)("inlineCode",{parentName:"p"},"bar")," was not specified in ",(0,p.kt)("inlineCode",{parentName:"p"},"peerDependencies"),", it is marked as optional. pnpm will therefore assume that any version of bar is fine. However, ",(0,p.kt)("inlineCode",{parentName:"p"},"foo")," is optional, but only to the required version specification."),(0,p.kt)("h2",{id:"publishconfig"},"publishConfig"),(0,p.kt)("p",null,"It is possible to override some fields in the manifest before the package is packed. The following fields may be overridden:"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"https://github.com/stereobooster/package.json#bin"},(0,p.kt)("inlineCode",{parentName:"a"},"bin"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"https://github.com/stereobooster/package.json#main"},(0,p.kt)("inlineCode",{parentName:"a"},"main"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"https://nodejs.org/api/esm.html#esm_package_exports"},(0,p.kt)("inlineCode",{parentName:"a"},"exports"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"https://github.com/stereobooster/package.json#types"},(0,p.kt)("inlineCode",{parentName:"a"},"types")," or ",(0,p.kt)("inlineCode",{parentName:"a"},"typings"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"https://github.com/stereobooster/package.json#module"},(0,p.kt)("inlineCode",{parentName:"a"},"module"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"https://github.com/stereobooster/package.json#browser"},(0,p.kt)("inlineCode",{parentName:"a"},"browser"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"https://github.com/stereobooster/package.json#esnext"},(0,p.kt)("inlineCode",{parentName:"a"},"esnext"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"https://github.com/stereobooster/package.json#es2015"},(0,p.kt)("inlineCode",{parentName:"a"},"es2015"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"https://github.com/stereobooster/package.json#unpkg-1"},(0,p.kt)("inlineCode",{parentName:"a"},"unpkg"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"https://github.com/stereobooster/package.json#microbundle"},(0,p.kt)("inlineCode",{parentName:"a"},"umd:main"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html#version-selection-with-typesversions"},(0,p.kt)("inlineCode",{parentName:"a"},"typesVersions"))),(0,p.kt)("li",{parentName:"ul"},"cpu"),(0,p.kt)("li",{parentName:"ul"},"os")),(0,p.kt)("p",null,"To override a field, add the publish version of the field to ",(0,p.kt)("inlineCode",{parentName:"p"},"publishConfig"),"."),(0,p.kt)("p",null,"For instance, the following ",(0,p.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "foo",\n    "version": "1.0.0",\n    "main": "src/index.ts",\n    "publishConfig": {\n        "main": "lib/index.js",\n        "typings": "lib/index.d.ts"\n    }\n}\n')),(0,p.kt)("p",null,"Will be published as:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "foo",\n    "version": "1.0.0",\n    "main": "lib/index.js",\n    "typings": "lib/index.d.ts"\n}\n')),(0,p.kt)("h3",{id:"publishconfigexecutablefiles"},"publishConfig.executableFiles"),(0,p.kt)("p",null,"By default, for portability reasons, no files except those listed in the bin field will be marked as executable in the resulting package archive. The ",(0,p.kt)("inlineCode",{parentName:"p"},"executableFiles")," field lets you declare additional fields that must have the executable flag (+x) set even if they aren't directly accessible through the bin field."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "publishConfig": {\n    "executableFiles": [\n      "./dist/shim.js"\n    ]\n  }\n}\n')),(0,p.kt)("h3",{id:"publishconfigdirectory"},"publishConfig.directory"),(0,p.kt)("p",null,"You also can use the field ",(0,p.kt)("inlineCode",{parentName:"p"},"publishConfig.directory")," to customize the published subdirectory relative to the current ",(0,p.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,p.kt)("p",null,"It is expected to have a modified version of the current package in the specified directory (usually using third party build tools)."),(0,p.kt)("blockquote",null,(0,p.kt)("p",{parentName:"blockquote"},"In questo esempio la cartella ",(0,p.kt)("inlineCode",{parentName:"p"},'"dist"')," deve contenere un ",(0,p.kt)("inlineCode",{parentName:"p"},"package.json"))),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "foo",\n  "version": "1.0.0",\n  "publishConfig": {\n    "directory": "dist"\n  }\n}\n')),(0,p.kt)("h3",{id:"publishconfiglinkdirectory"},"publishConfig.linkDirectory"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"Predefinito: ",(0,p.kt)("strong",{parentName:"li"},"true")),(0,p.kt)("li",{parentName:"ul"},"Tipo: ",(0,p.kt)("strong",{parentName:"li"},"Booleano"))),(0,p.kt)("p",null,"When set to ",(0,p.kt)("inlineCode",{parentName:"p"},"true"),", the project will be symlinked from the ",(0,p.kt)("inlineCode",{parentName:"p"},"publishConfig.directory")," location during local development."),(0,p.kt)("p",null,"Ad esempio:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "foo",\n  "version": "1.0.0",\n  "publishConfig": {\n    "directory": "dist"\n    "linkDirectory": true\n  }\n}\n')),(0,p.kt)("h2",{id:"pnpmoverrides"},"pnpm.overrides"),(0,p.kt)("p",null,"Questo campo consente di indicare a pnpm di sovrascrivere qualsiasi dipendenza nel grafico delle dipendenze. Questo \xe8 utile per imporre a tutti i tuoi pacchetti di utilizzare una singola versione di una dipendenza, eseguire il backport di una correzione o sostituire una dipendenza con un fork."),(0,p.kt)("p",null,"Nota che il campo delle sostituzioni pu\xf2 essere impostato solo alla radice del progetto."),(0,p.kt)("p",null,"Un esempio del campo ",(0,p.kt)("inlineCode",{parentName:"p"},'"pnpm"."overrides"'),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pnpm": {\n    "overrides": {\n      "foo": "^1.0.0",\n      "quux": "npm:@myorg/quux@^1.0.0",\n      "bar@^2.1.0": "3.0.0",\n      "qar@1>zoo": "2"\n    }\n  }\n}\n')),(0,p.kt)("p",null,'Puoi specificare il pacchetto a cui appartiene la dipendenza sovrascritta separando il selettore del pacchetto dal selettore delle dipendenze con un ">", per esempio ',(0,p.kt)("inlineCode",{parentName:"p"},"qar@1>zoo")," sovrascriver\xe0 solo la dipendenza ",(0,p.kt)("inlineCode",{parentName:"p"},"zoo")," di ",(0,p.kt)("inlineCode",{parentName:"p"},"qar@1"),", non per altre dipendenze."),(0,p.kt)("p",null,"An override may be defined as a reference to a direct dependency's spec. This is achieved by prefixing the name of the dependency with a ",(0,p.kt)("inlineCode",{parentName:"p"},"$"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dependencies": {\n    "foo": "^1.0.0"\n  },\n  "pnpm": {\n    "overrides": {\n      "foo": "$foo"\n    }\n  }\n}\n')),(0,p.kt)("p",null,"The referenced package does not need to match the overridden one:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dependencies": {\n    "foo": "^1.0.0"\n  },\n  "pnpm": {\n    "overrides": {\n      "bar": "$foo"\n    }\n  }  \n}\n')),(0,p.kt)("h2",{id:"pnpmpackageextensions"},"pnpm.packageExtensions"),(0,p.kt)("p",null,"I campi ",(0,p.kt)("inlineCode",{parentName:"p"},"packageExtensions")," offrono un modo per estendere le definizioni dei pacchetti esistenti con informazioni aggiuntive. Ad esempio, se ",(0,p.kt)("inlineCode",{parentName:"p"},"react-redux")," dovrebbe avere ",(0,p.kt)("inlineCode",{parentName:"p"},"react-dom")," nelle sue ",(0,p.kt)("inlineCode",{parentName:"p"},"peerDependencies")," ma non ce l'ha, \xe8 possibile patchare ",(0,p.kt)("inlineCode",{parentName:"p"},"react-redux")," usando ",(0,p.kt)("inlineCode",{parentName:"p"},"packageExtensions"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pnpm": {\n    "packageExtensions": {\n      "react-redux": {\n        "peerDependencies": {\n          "react-dom": "*"\n        }\n      }\n    }\n  }\n}\n')),(0,p.kt)("p",null,"Le chiavi in ",(0,p.kt)("inlineCode",{parentName:"p"},"packageExtensions")," sono nomi di pacchetti o nomi di pacchetti e intervalli di semver, quindi \xe8 possibile correggere solo alcune versioni di un pacchetto:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pnpm": {\n    "packageExtensions": {\n      "react-redux@1": {\n        "peerDependencies": {\n          "react-dom": "*"\n        }\n      }\n    }\n  }\n}\n')),(0,p.kt)("p",null,"I seguenti campi possono essere estesi utilizzando ",(0,p.kt)("inlineCode",{parentName:"p"},"packageExtensions"),": ",(0,p.kt)("inlineCode",{parentName:"p"},"dependencies"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"optionalDependencies"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"peerDependencies"),", e ",(0,p.kt)("inlineCode",{parentName:"p"},"peerDependenciesMeta"),"."),(0,p.kt)("p",null,"Un esempio pi\xf9 grande:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pnpm": {\n    "packageExtensions": {\n      "express@1": {\n        "optionalDependencies": {\n          "typescript": "2"\n        }\n      },\n      "fork-ts-checker-webpack-plugin": {\n        "dependencies": {\n          "@babel/core": "1"\n        },\n        "peerDependencies": {\n          "eslint": ">= 6"\n        },\n        "peerDependenciesMeta": {\n          "eslint": {\n            "optional": true\n          }\n        }\n      }\n    }\n  }\n}\n')),(0,p.kt)("admonition",{type:"tip"},(0,p.kt)("p",{parentName:"admonition"},"Together with Yarn, we maintain a database of ",(0,p.kt)("inlineCode",{parentName:"p"},"packageExtensions")," to patch broken packages in the ecosystem. If you use ",(0,p.kt)("inlineCode",{parentName:"p"},"packageExtensions"),", consider sending a PR upstream and contributing your extension to the ",(0,p.kt)("a",{parentName:"p",href:"https://github.com/yarnpkg/berry/blob/master/packages/yarnpkg-extensions/sources/index.ts"},(0,p.kt)("inlineCode",{parentName:"a"},"@yarnpkg/extensions"))," database.")),(0,p.kt)("h2",{id:"pnpmpeerdependencyrules"},"pnpm.peerDependencyRules"),(0,p.kt)("h3",{id:"pnpmpeerdependencyrulesignoremissing"},"pnpm.peerDependencyRules.ignoreMissing"),(0,p.kt)("p",null,"pnpm non stamper\xe0 avvisi sulle dipendenze peer mancanti da questo elenco."),(0,p.kt)("p",null,"Ad esempio, con la configurazione seguente, pnpm non stamper\xe0 avvisi se una dipendenza ha bisogno di ",(0,p.kt)("inlineCode",{parentName:"p"},"react")," ma ",(0,p.kt)("inlineCode",{parentName:"p"},"react")," non \xe8 installato:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pnpm": {\n    "peerDependencyRules": {\n      "ignoreMissing": ["react"]\n    }\n  }\n}\n')),(0,p.kt)("p",null,"Package name patterns may also be used:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pnpm": {\n    "peerDependencyRules": {\n      "ignoreMissing": ["@babel/*", "@eslint/*"]\n    }\n  }\n}\n')),(0,p.kt)("h3",{id:"pnpmpeerdependencyrulesallowedversions"},"pnpm.peerDependencyRules.allowedVersions"),(0,p.kt)("p",null,"Gli avvisi di dipendenza peer non soddisfatte non verranno stampati per le dipendenze peer dell'intervallo specificato."),(0,p.kt)("p",null,"Ad esempio, se hai alcune dipendenze che richiedono ",(0,p.kt)("inlineCode",{parentName:"p"},"react@16")," ma sai che funzionano bene con ",(0,p.kt)("inlineCode",{parentName:"p"},"react@17"),", puoi utilizzare la seguente configurazione:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pnpm": {\n    "peerDependencyRules": {\n      "allowedVersions": {\n        "react": "17"\n      }\n    }\n  }\n}\n')),(0,p.kt)("p",null,"Questo dir\xe0 a pnpm che qualsiasi dipendenza che ha react nelle sue dipendenze peer dovrebbe consentire l'installazione di ",(0,p.kt)("inlineCode",{parentName:"p"},"react")," v17."),(0,p.kt)("p",null,"It is also possible to suppress the warnings only for peer dependencies of specific packages. For instance, with the following configuration ",(0,p.kt)("inlineCode",{parentName:"p"},"react")," v17 will be only allowed when it is in the peer dependencies of the ",(0,p.kt)("inlineCode",{parentName:"p"},"button")," v2 package or in the dependencies of any ",(0,p.kt)("inlineCode",{parentName:"p"},"card")," package:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pnpm": {\n    "peerDependencyRules": {\n      "allowedVersions": {\n        "button@2>react": "17",\n        "card>react": "17"\n      }\n    }\n  }\n}\n')),(0,p.kt)("h3",{id:"pnpmpeerdependencyrulesallowany"},"pnpm.peerDependencyRules.allowAny"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"allowAny")," is an array of package name patterns, any peer dependency matching the pattern will be resolved from any version, regardless of the range specified in ",(0,p.kt)("inlineCode",{parentName:"p"},"peerDependencies"),". For instance:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pnpm": {\n    "peerDependencyRules": {\n      "allowAny": ["@babel/*", "eslint"]\n    }\n  }\n}\n')),(0,p.kt)("p",null,"The above setting will mute any warnings about peer dependency version mismatches related to ",(0,p.kt)("inlineCode",{parentName:"p"},"@babel/")," packages or ",(0,p.kt)("inlineCode",{parentName:"p"},"eslint"),"."),(0,p.kt)("h2",{id:"pnpmneverbuiltdependencies"},"pnpm.neverBuiltDependencies"),(0,p.kt)("p",null,'This field allows to ignore the builds of specific dependencies. The "preinstall", "install", and "postinstall" scripts of the listed packages will not be executed during installation.'),(0,p.kt)("p",null,"An example of the ",(0,p.kt)("inlineCode",{parentName:"p"},'"pnpm"."neverBuiltDependencies"')," field:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pnpm": {\n    "neverBuiltDependencies": ["fsevents", "level"]\n  }\n}\n')),(0,p.kt)("h2",{id:"pnpmonlybuiltdependencies"},"pnpm.onlyBuiltDependencies"),(0,p.kt)("p",null,"A list of package names that are allowed to be executed during installation. If this field exists, only the listed packages will be able to run install scripts."),(0,p.kt)("p",null,"Esempio:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pnpm": {\n    "onlyBuiltDependencies": ["fsevents"]\n  }\n}\n')),(0,p.kt)("h2",{id:"pnpmalloweddeprecatedversions"},"pnpm.allowedDeprecatedVersions"),(0,p.kt)("p",null,"This setting allows muting deprecation warnings of specific packages."),(0,p.kt)("p",null,"Esempio:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pnpm": {\n    "allowedDeprecatedVersions": {\n      "express": "1",\n      "request": "*"\n    }\n  }\n}\n')),(0,p.kt)("p",null,"With the above configuration pnpm will not print deprecation warnings about any version of ",(0,p.kt)("inlineCode",{parentName:"p"},"request")," and about v1 of ",(0,p.kt)("inlineCode",{parentName:"p"},"express"),"."),(0,p.kt)("h2",{id:"pnpmpatcheddependencies"},"pnpm.patchedDependencies"),(0,p.kt)("p",null,"This field is added/updated automatically when you run ",(0,p.kt)("a",{parentName:"p",href:"/it/cli/patch-commit"},"pnpm patch-commit"),". It is a dictionary where the key should be the package name and exact version. The value should be a relative path to a patch file."),(0,p.kt)("p",null,"Esempio:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pnpm": {\n    "patchedDependencies": {\n      "express@4.18.1": "patches/express@4.18.1.patch"\n    }\n  }\n}\n')),(0,p.kt)("h2",{id:"pnpmallownonappliedpatches"},"pnpm.allowNonAppliedPatches"),(0,p.kt)("p",null,"When ",(0,p.kt)("inlineCode",{parentName:"p"},"true"),", installation won't fail if some of the patches from the ",(0,p.kt)("inlineCode",{parentName:"p"},"patchedDependencies")," field were not applied."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pnpm": {\n    "patchedDependencies": {\n      "express@4.18.1": "patches/express@4.18.1.patch"\n    }\n    "allowNonAppliedPatches": true\n}\n')),(0,p.kt)("h2",{id:"pnpmupdateconfig"},"pnpm.updateConfig"),(0,p.kt)("h3",{id:"pnpmupdateconfigignoredependencies"},"pnpm.updateConfig.ignoreDependencies"),(0,p.kt)("p",null,"Sometimes you can't update a dependency. For instance, the latest version of the dependency started to use ESM but your project is not yet in ESM. Annoyingly, such a package will be always printed out by the ",(0,p.kt)("inlineCode",{parentName:"p"},"pnpm outdated")," command and updated, when running ",(0,p.kt)("inlineCode",{parentName:"p"},"pnpm update --latest"),". However, you may list packages that you don't want to upgrade in the ",(0,p.kt)("inlineCode",{parentName:"p"},"ignoreDependencies")," field:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pnpm": {\n    "updateConfig": {\n      "ignoreDependencies": ["load-json-file"]\n    }\n  }\n}\n')),(0,p.kt)("p",null,"Patterns are also supported, so you may ignore any packages from a scope: ",(0,p.kt)("inlineCode",{parentName:"p"},"@babel/*"),"."),(0,p.kt)("h2",{id:"pnpmauditconfig"},"pnpm.auditConfig"),(0,p.kt)("h3",{id:"pnpmauditconfigignorecves"},"pnpm.auditConfig.ignoreCves"),(0,p.kt)("p",null,"A list of CVE IDs that will be ignored by the ",(0,p.kt)("a",{parentName:"p",href:"/it/cli/audit"},(0,p.kt)("inlineCode",{parentName:"a"},"pnpm audit"))," command."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "pnpm": {\n    "auditConfig": {\n      "ignoreCves": [\n        "CVE-2022-36313"\n      ]\n    }\n  }\n}\n')),(0,p.kt)("h2",{id:"pnpmrequiredscripts"},"pnpm.requiredScripts"),(0,p.kt)("p",null,"Scripts listed in this array will be required in each project of the workspace. Otherwise, ",(0,p.kt)("inlineCode",{parentName:"p"},"pnpm -r run <script name>")," will fail."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},'{\n  "pnpm": {\n    "requiredScripts": ["build"]\n  }\n}\n')),(0,p.kt)("h2",{id:"resolutions"},"resolutions"),(0,p.kt)("p",null,"Same as ",(0,p.kt)("a",{parentName:"p",href:"#pnpmoverrides"},(0,p.kt)("inlineCode",{parentName:"a"},"pnpm.overrides")),". We read it for easier migration from Yarn."))}k.isMDXComponent=!0}}]);