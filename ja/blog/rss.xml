<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>pnpm Blog</title>
        <link>https://pnpm.io/ja/blog</link>
        <description>pnpm Blog</description>
        <lastBuildDate>Fri, 30 Dec 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>ja</language>
        <item>
            <title><![CDATA[2022年のpnpm]]></title>
            <link>https://pnpm.io/ja/blog/2022/12/30/yearly-update</link>
            <guid>https://pnpm.io/ja/blog/2022/12/30/yearly-update</guid>
            <pubDate>Fri, 30 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[年末です。 本当に大変な年でした。 ご存知かもしれませんが、私はウクライナに住んでいるので、ロシアが我々に対して起こした戦争により、このプロジェクトを率いるのは昨年以前よりも大変になりました。 それでも、pnpm にとっては良い年でした。 多くの新しいユーザー、コントリビューターを獲得し、多くの優れた機能を実装しました。]]></description>
            <content:encoded><![CDATA[<p>年末です。 本当に大変な年でした。 ご存知かもしれませんが、私はウクライナに住んでいるので、ロシアが我々に対して起こした戦争により、このプロジェクトを率いるのは昨年以前よりも大変になりました。 それでも、pnpm にとっては良い年でした。 多くの新しいユーザー、コントリビューターを獲得し、多くの優れた機能を実装しました。</p><p><img loading="lazy" src="/ja/assets/images/2022-review-092f8f0dfe82b760c2e90fd776d82f75.png" width="640" height="640" class="img_Ytbv"></p><p>(上のイラストは、Midjourneyで作りました。 寅は寅年を象徴しています)</p><h2 class="anchor anchorWithStickyNavbar_G0xS" id="使い方">使い方<a href="#使い方" class="hash-link" aria-label="使い方 への直接リンク" title="使い方 への直接リンク">​</a></h2><h3 class="anchor anchorWithStickyNavbar_G0xS" id="ダウンロード数">ダウンロード数<a href="#ダウンロード数" class="hash-link" aria-label="ダウンロード数 への直接リンク" title="ダウンロード数 への直接リンク">​</a></h3><p>今年の目標は、ダウンロード数でLernaに勝つことでした。 <a href="https://npm-stat.com/charts.html?package=pnpm&amp;package=lerna&amp;from=2022-01-01&amp;to=2022-12-30" target="_blank" rel="noopener noreferrer">8月に</a>この目標を達成することができました。</p><p><img loading="lazy" src="/ja/assets/images/pnpm-vs-lerna-stats-cad28f3b9685ef684c864f919f7f9c5e.png" width="997" height="400" class="img_Ytbv"></p><p>pnpmは 2022年に 2021年の <a href="https://npm-stat.com/charts.html?package=pnpm&amp;from=2016-12-01&amp;to=2022-12-30" target="_blank" rel="noopener noreferrer">5倍以上</a> ダウンロードされました。</p><p><img loading="lazy" src="/ja/assets/images/download-stats-2022-e4de79bf61e1066802166f9d97cb36ac.png" width="997" height="400" class="img_Ytbv"></p><h3 class="anchor anchorWithStickyNavbar_G0xS" id="ドキュメントの訪問者数">ドキュメントの訪問者数<a href="#ドキュメントの訪問者数" class="hash-link" aria-label="ドキュメントの訪問者数 への直接リンク" title="ドキュメントの訪問者数 への直接リンク">​</a></h3><p>私たちはGoogle Analyticsを使って、ドキュメントサイトから個人を特定できない統計情報を収集しています。 2022年には、1週間に20,000人以上のユニークビジターが訪れることもありました。 これは2021年の10倍です！</p><p><img loading="lazy" src="/ja/assets/images/ga-unique-visits-2022-b2e9bf0b6c559a5c59fdbfd8bb1861f0.png" width="778" height="391" class="img_Ytbv"></p><h3 class="anchor anchorWithStickyNavbar_G0xS" id="githubのスター数">GitHubのスター数<a href="#githubのスター数" class="hash-link" aria-label="GitHubのスター数 への直接リンク" title="GitHubのスター数 への直接リンク">​</a></h3><p><a href="https://github.com/pnpm/pnpm" target="_blank" rel="noopener noreferrer">メインのGitHubリポジトリ</a>は、今年はスターをほぼ7000個獲得しました</p><p><img loading="lazy" src="/ja/assets/images/stars-2022-434ca95e6da688fdff1bb1bf89d6a2d9.png" width="584" height="787" class="img_Ytbv"></p><h3 class="anchor anchorWithStickyNavbar_G0xS" id="コントリビューター">コントリビューター<a href="#コントリビューター" class="hash-link" aria-label="コントリビューター への直接リンク" title="コントリビューター への直接リンク">​</a></h3><p>今年はたくさんのアクティブな貢献者が新たに来てくれました。 2022 年に少なくとも1個のPR をマージされた人は以下の通りです。</p><ul><li><a href="https://github.com/zkochan" target="_blank" rel="noopener noreferrer">Zoltan Kochan</a></li><li><a href="https://github.com/lvqq" target="_blank" rel="noopener noreferrer">chlorine</a></li><li><a href="https://github.com/await-ovo" target="_blank" rel="noopener noreferrer">await-ovo</a></li><li><a href="https://github.com/gluxon" target="_blank" rel="noopener noreferrer">Brandon Cheng</a></li><li><a href="https://github.com/d3lm" target="_blank" rel="noopener noreferrer">Dominic Elm</a></li><li><a href="https://github.com/mcmxcdev" target="_blank" rel="noopener noreferrer">MCMXC</a></li><li><a href="https://github.com/dev-itsheng" target="_blank" rel="noopener noreferrer">那里好脏不可以</a></li><li><a href="https://github.com/HomyeeKing" target="_blank" rel="noopener noreferrer">Homyee King</a></li><li><a href="https://github.com/Shinyaigeek" target="_blank" rel="noopener noreferrer">Shinobu Hayashi</a></li><li><a href="https://github.com/BlackHole1" target="_blank" rel="noopener noreferrer">Black-Hole</a></li><li><a href="https://github.com/kenrick95" target="_blank" rel="noopener noreferrer">Kenrick</a></li><li><a href="https://github.com/weyert" target="_blank" rel="noopener noreferrer">Weyert de Boer</a></li><li><a href="https://github.com/gwhitney" target="_blank" rel="noopener noreferrer">Glen Whitney</a></li><li><a href="https://github.com/chengcyber" target="_blank" rel="noopener noreferrer">Cheng</a></li><li><a href="https://github.com/fireairforce" target="_blank" rel="noopener noreferrer">zoomdong</a></li><li><a href="https://github.com/ufec" target="_blank" rel="noopener noreferrer">thinkhalo</a></li><li><a href="https://github.com/LuciNyan" target="_blank" rel="noopener noreferrer">子瞻 Luci</a></li><li><a href="https://github.com/Spencer17x" target="_blank" rel="noopener noreferrer">spencer17x</a></li><li><a href="https://github.com/liuxingbaoyu" target="_blank" rel="noopener noreferrer">liuxingbaoyu</a></li><li><a href="https://github.com/WhiteKiwi" target="_blank" rel="noopener noreferrer">장지훈</a></li><li><a href="https://github.com/jondlm" target="_blank" rel="noopener noreferrer">Jon de la Motte</a></li><li><a href="https://github.com/Jack-Works" target="_blank" rel="noopener noreferrer">Jack Works</a></li><li><a href="https://github.com/milahu" target="_blank" rel="noopener noreferrer">milahu</a></li><li><a href="https://github.com/David-Collins" target="_blank" rel="noopener noreferrer">David Collins</a></li><li><a href="https://github.com/nikoladev" target="_blank" rel="noopener noreferrer">nikoladev</a></li><li><a href="https://github.com/ibezkrovnyi" target="_blank" rel="noopener noreferrer">Igor Bezkrovnyi</a></li><li><a href="https://github.com/illright" target="_blank" rel="noopener noreferrer">Lev Chelyadinov</a></li><li><a href="https://github.com/javier-garcia-meteologica" target="_blank" rel="noopener noreferrer">javier-garcia-meteologica</a></li></ul><h2 class="anchor anchorWithStickyNavbar_G0xS" id="機能のハイライト">機能のハイライト<a href="#機能のハイライト" class="hash-link" aria-label="機能のハイライト への直接リンク" title="機能のハイライト への直接リンク">​</a></h2><h3 class="anchor anchorWithStickyNavbar_G0xS" id="シンボリックを使わないnode_modulesの巻き上げをサポート--v6250-から">シンボリックを使わない<code>node_modules</code>の巻き上げをサポート ( <a href="https://github.com/pnpm/pnpm/releases/tag/v6.25.0" target="_blank" rel="noopener noreferrer">v6.25.0</a> から)<a href="#シンボリックを使わないnode_modulesの巻き上げをサポート--v6250-から" class="hash-link" aria-label="シンボリックを使わないnode_modulesの巻き上げをサポート--v6250-から への直接リンク" title="シンボリックを使わないnode_modulesの巻き上げをサポート--v6250-から への直接リンク">​</a></h3><p>2022 年の初めに、「従来の」巻き上げ (別名 フラット<code>node_modules</code>) のサポートを追加しました。 Yarn の巻き上げアルゴリズムを使用して、適切に巻き上げられた <code>node_modules</code>を作成します。 この新しい設定により、基本的に pnpm は、npm CLI と互換性のあるすべての Node.js スタックと互換性を持つようになりました。</p><p><code>node_modules</code> で巻き上げられた(ホイスト)ディレクトリ構造を使用するには、 <code>.npmrc</code> ファイルで <code>node-linker=hoisted</code> 設定を使用します。</p><h3 class="anchor anchorWithStickyNavbar_G0xS" id="副作用キャッシュ--v700から">副作用キャッシュ ( <a href="https://github.com/pnpm/pnpm/releases/tag/v7.0.0" target="_blank" rel="noopener noreferrer">v7.0.0</a>から)<a href="#副作用キャッシュ--v700から" class="hash-link" aria-label="副作用キャッシュ--v700から への直接リンク" title="副作用キャッシュ--v700から への直接リンク">​</a></h3><p>v7 からは <a href="/ja/npmrc#side-effects-cache">side-effect-cache</a> がデフォルトで有効になり、ビルドが必要な依存関係はマシン上で一度だけビルドされるようになりました。 これにより、ビルドスクリプトがある依存関係を持つプロジェクトでは、インストール速度が大幅に向上します。</p><h3 class="anchor anchorWithStickyNavbar_G0xS" id="依存関係のパッチ--v740から">依存関係のパッチ ( <a href="https://github.com/pnpm/pnpm/releases/tag/v7.4.0" target="_blank" rel="noopener noreferrer">v7.4.0</a>から)<a href="#依存関係のパッチ--v740から" class="hash-link" aria-label="依存関係のパッチ--v740から への直接リンク" title="依存関係のパッチ--v740から への直接リンク">​</a></h3><p><code>node_modules</code>内の依存関係にパッチを当てる、<a href="/ja/cli/patch"><code>pnpm patch</code></a> コマンドが追加されました。</p><h3 class="anchor anchorWithStickyNavbar_G0xS" id="時間ベースの依存関係解決方式-v7100から">時間ベースの依存関係解決方式 (<a href="https://github.com/pnpm/pnpm/releases/tag/v7.10.0" target="_blank" rel="noopener noreferrer">v7.10.0</a>から)<a href="#時間ベースの依存関係解決方式-v7100から" class="hash-link" aria-label="時間ベースの依存関係解決方式-v7100から への直接リンク" title="時間ベースの依存関係解決方式-v7100から への直接リンク">​</a></h3><p>新しい解決モードが pnpm に追加されました。これにより、依存関係の更新がより安全になります。 <a href="https://pnpm.io/npmrc#resolution-mode" target="_blank" rel="noopener noreferrer">resolution-mode</a> 設定で依存関係解決モードを変更できます。</p><h3 class="anchor anchorWithStickyNavbar_G0xS" id="依存関係のライセンスの一覧表示--v7170から">依存関係のライセンスの一覧表示 ( <a href="https://github.com/pnpm/pnpm/releases/tag/v7.17.0" target="_blank" rel="noopener noreferrer">v7.17.0</a>から)<a href="#依存関係のライセンスの一覧表示--v7170から" class="hash-link" aria-label="依存関係のライセンスの一覧表示--v7170から への直接リンク" title="依存関係のライセンスの一覧表示--v7170から への直接リンク">​</a></h3><p><a href="/ja/cli/licenses"><code>pnpm licenses list</code></a> コマンドを使用して、インストールされているパッケージのライセンスを確認できるようになりました。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2021年のpnpm]]></title>
            <link>https://pnpm.io/ja/blog/2021/12/29/yearly-update</link>
            <guid>https://pnpm.io/ja/blog/2021/12/29/yearly-update</guid>
            <pubDate>Wed, 29 Dec 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[今年はpnpmにとって良い年でした。年末なので、1年を振り返ってみましょう]]></description>
            <content:encoded><![CDATA[<p>今年はpnpmにとって良い年でした。年末なので、1年を振り返ってみましょう</p><h2 class="anchor anchorWithStickyNavbar_G0xS" id="使い方">使い方<a href="#使い方" class="hash-link" aria-label="使い方 への直接リンク" title="使い方 への直接リンク">​</a></h2><h3 class="anchor anchorWithStickyNavbar_G0xS" id="ダウンロード数">ダウンロード数<a href="#ダウンロード数" class="hash-link" aria-label="ダウンロード数 への直接リンク" title="ダウンロード数 への直接リンク">​</a></h3><p>今年の目標は、ダウンロード数でBowerに勝つことでした。 <a href="https://npm-stat.com/charts.html?package=pnpm&amp;package=bower&amp;from=2021-01-01&amp;to=2021-12-29" target="_blank" rel="noopener noreferrer">11月に</a>この目標を達成することができました。</p><p><img loading="lazy" src="/ja/assets/images/pnpm-vs-bower-stats-6ec69a7308f5fbc1433420b1b2f7457f.png" width="976" height="389" class="img_Ytbv"></p><p>pnpmは 2021年に 2020年の 約 <a href="https://npm-stat.com/charts.html?package=pnpm&amp;from=2016-12-01&amp;to=2021-12-29" target="_blank" rel="noopener noreferrer">3倍</a> ダウンロードされました。</p><p><img loading="lazy" src="/ja/assets/images/download-stats-2021-1418562cb03abd558c4a6b4b17155227.png" width="983" height="394" class="img_Ytbv"></p><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_fVrm"><div class="admonitionHeading_CfVA"><span class="admonitionIcon_Hsjw"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>メモ</div><div class="admonitionContent_CXYE"><p>この統計は、pnpmの全てのインストール方法を測定しているわけではありません。 <a href="https://www.npmjs.com/package/pnpm" target="_blank" rel="noopener noreferrer">pnpm npm package</a>ダウンロード数のみを測定しています。 今年追加したpnpmのコンパイル済みバイナリバージョンは別で配布されます。</p></div></div><h3 class="anchor anchorWithStickyNavbar_G0xS" id="ドキュメントの訪問者数">ドキュメントの訪問者数<a href="#ドキュメントの訪問者数" class="hash-link" aria-label="ドキュメントの訪問者数 への直接リンク" title="ドキュメントの訪問者数 への直接リンク">​</a></h3><p>私たちはGoogle Analyticsを使って、ドキュメントサイトから個人を特定できない統計情報を収集しています。 2021年には、1週間に2,000人以上のユニークビジターが訪れることもありました。</p><p><img loading="lazy" src="/ja/assets/images/ga-unique-visits-2021-b8bc3649f680565127696c85bdd4b701.png" width="665" height="509" class="img_Ytbv"></p><p>利用者の大半はアメリカか中国からアクセスしています</p><p><img loading="lazy" src="/ja/assets/images/countries-2021-8eb9625e1798649ee04451dfb10ac851.png" width="585" height="498" class="img_Ytbv"></p><h3 class="anchor anchorWithStickyNavbar_G0xS" id="githubのスター数">GitHubのスター数<a href="#githubのスター数" class="hash-link" aria-label="GitHubのスター数 への直接リンク" title="GitHubのスター数 への直接リンク">​</a></h3><p><a href="https://github.com/pnpm/pnpm" target="_blank" rel="noopener noreferrer">メインのGitHubリポジトリ</a>は、今年だけで5000以上のスターを獲得しました</p><p><img loading="lazy" src="/ja/assets/images/stars-2021-0061c16f424e33ba0db224d82bcb53f3.png" width="913" height="800" class="img_Ytbv"></p><h3 class="anchor anchorWithStickyNavbar_G0xS" id="新規ユーザー">新規ユーザー<a href="#新規ユーザー" class="hash-link" aria-label="新規ユーザー への直接リンク" title="新規ユーザー への直接リンク">​</a></h3><p>今年最大の新規ユーザーは、<a href="https://github.com/pnpm/pnpm.github.io/pull/89" target="_blank" rel="noopener noreferrer">Bytedance</a> (TikTok運営元の会社)です</p><p>また、多くの素晴らしいオープンソースプロジェクトがpnpmを使用するようになりました。 スイッチした理由として、pnpmがモノレポを強力にサポートしていることを挙げるプロジェクトがあります</p><ul><li><a href="https://github.com/vuejs/vue-next" target="_blank" rel="noopener noreferrer">Vue</a></li><li><a href="https://github.com/vitejs/vite" target="_blank" rel="noopener noreferrer">Vite</a></li><li><a href="https://pnpm.io/workspaces#usage-examples" target="_blank" rel="noopener noreferrer">その他多数</a></li></ul><p>pnpmの効率、スピード、美しさが気に入って乗り換えたプロジェクトもあります</p><ul><li><a href="https://twitter.com/Autoprefixer/status/1476226146488692736" target="_blank" rel="noopener noreferrer">Autoprefixer</a></li><li><a href="https://twitter.com/PostCSS/status/1470438664006258701" target="_blank" rel="noopener noreferrer">PostCSS</a></li><li><a href="https://twitter.com/Browserslist/status/1468264308308156419" target="_blank" rel="noopener noreferrer">Browserslist</a></li></ul><h2 class="anchor anchorWithStickyNavbar_G0xS" id="機能のハイライト">機能のハイライト<a href="#機能のハイライト" class="hash-link" aria-label="機能のハイライト への直接リンク" title="機能のハイライト への直接リンク">​</a></h2><h3 class="anchor anchorWithStickyNavbar_G0xS" id="新しいlockfileの形式v600から">新しいlockfileの形式(<a href="https://github.com/pnpm/pnpm/releases/tag/v6.0.0" target="_blank" rel="noopener noreferrer">v6.0.0</a>から)<a href="#新しいlockfileの形式v600から" class="hash-link" aria-label="新しいlockfileの形式v600から への直接リンク" title="新しいlockfileの形式v600から への直接リンク">​</a></h3><p>今年最初の、そして最も重要な変更点の1つは、新しい<code>pnpm-lock.yaml</code>形式でした。 これは破壊的変更だったので、v6をリリースする必要がありました。 しかし、これは成功でした。 いままでのlockfileでは、Gitのコンフリクトが頻繁に発生していました。 新しい形式を導入して以来、Gitのコンフリクトに関する苦情は一切なくなりました。</p><h3 class="anchor anchorWithStickyNavbar_G0xS" id="nodejsのバージョン管理-v6120から">Node.jsのバージョン管理 (<a href="https://github.com/pnpm/pnpm/releases/tag/v6.12.0" target="_blank" rel="noopener noreferrer">v6.12.0</a>から)<a href="#nodejsのバージョン管理-v6120から" class="hash-link" aria-label="nodejsのバージョン管理-v6120から への直接リンク" title="nodejsのバージョン管理-v6120から への直接リンク">​</a></h3><p>Node.jsのバージョンを管理するコマンド(<code>pnpm env</code>)を追加しました。 そのため、nvmやVoltaのようなNode.jsのバージョン管理ソフトの代わりに、pnpmを使えます。</p><p>また、pnpmはスタンドアロンの実行可能ファイルとして出荷されますので、Node.jsがプリインストールされていないシステムでも実行することができます。</p><h3 class="anchor anchorWithStickyNavbar_G0xS" id="ローカル依存性の注入-v6200から">ローカル依存性の注入 (<a href="https://github.com/pnpm/pnpm/releases/tag/v6.20.0" target="_blank" rel="noopener noreferrer">v6.20.0</a>から)<a href="#ローカル依存性の注入-v6200から" class="hash-link" aria-label="ローカル依存性の注入-v6200から への直接リンク" title="ローカル依存性の注入-v6200から への直接リンク">​</a></h3><p>ローカル依存関係を "注入" することができます。 デフォルトでは、ローカルな依存関係は <code>node_modules</code>にシンボリックリンクされますが、この新しい機能では、代わりにパッケージのファイルをハードリンクするように pnpm に指示することができます。</p><h3 class="anchor anchorWithStickyNavbar_G0xS" id="peerdependency-issueのレポート機能の改善-since-v6240">peerDependency issueのレポート機能の改善 (since <a href="https://github.com/pnpm/pnpm/releases/tag/v6.24.0" target="_blank" rel="noopener noreferrer">v6.24.0</a>)<a href="#peerdependency-issueのレポート機能の改善-since-v6240" class="hash-link" aria-label="peerdependency-issueのレポート機能の改善-since-v6240 への直接リンク" title="peerdependency-issueのレポート機能の改善-since-v6240 への直接リンク">​</a></h3><p>peerDependenciesの問題は、以前はプレーンテキストで出力され、理解するのが困難でした。 現在は、すべてグループ化され、美しい階層構造で出力されます。</p><h2 class="anchor anchorWithStickyNavbar_G0xS" id="競合ツールの動向">競合ツールの動向<a href="#競合ツールの動向" class="hash-link" aria-label="競合ツールの動向 への直接リンク" title="競合ツールの動向 への直接リンク">​</a></h2><h3 class="anchor anchorWithStickyNavbar_G0xS" id="yarn">Yarn<a href="#yarn" class="hash-link" aria-label="Yarn への直接リンク" title="Yarn への直接リンク">​</a></h3><p>Yarnは<a href="https://dev.to/arcanis/yarn-31-corepack-esm-pnpm-optional-packages--3hak#new-install-mode-raw-pnpm-endraw-" target="_blank" rel="noopener noreferrer">v3.1</a>からpnpmリンカを追加しました。 そのため、Yarnはpnpmが作成するものと同様のディレクトリ構造をもつnode_modulesを作成できます。</p><p>また、Yarnチームは、ディスク容量を効率的に使用できるように、コンテンツ・アドレス可能なストレージを実装する予定です。</p><h3 class="anchor anchorWithStickyNavbar_G0xS" id="npm">npm<a href="#npm" class="hash-link" aria-label="npm への直接リンク" title="npm への直接リンク">​</a></h3><p>npmチームは、pnpmが採用しているシンボリックリンクによるnode_modulesのディレクトリ構造も採用することに決定しました。(関連する <a href="https://github.com/npm/rfcs/blob/main/accepted/0042-isolated-mode.md" target="_blank" rel="noopener noreferrer">RFC</a>).</p><h3 class="anchor anchorWithStickyNavbar_G0xS" id="その他">その他<a href="#その他" class="hash-link" aria-label="その他 への直接リンク" title="その他 への直接リンク">​</a></h3><p>Zigで書かれた<a href="https://twitter.com/jarredsumner/status/1473416431291174912/photo/1" target="_blank" rel="noopener noreferrer">Bun</a>と Rustで書かれた<a href="https://github.com/voltpkg/volt" target="_blank" rel="noopener noreferrer">Volt</a> のふたつは、npm/Yarn/pnpm より高速と主張しています。 私はこれらの新しいパッケージマネージャーのベンチマークはまだ行っていません。</p><h2 class="anchor anchorWithStickyNavbar_G0xS" id="今後の計画">今後の計画<a href="#今後の計画" class="hash-link" aria-label="今後の計画 への直接リンク" title="今後の計画 への直接リンク">​</a></h2><p>より速く、より良く、ベストを目指す</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[pnpm でのノードモジュールに関するオプション設定]]></title>
            <link>https://pnpm.io/ja/blog/2020/10/17/node-modules-configuration-options-with-pnpm</link>
            <guid>https://pnpm.io/ja/blog/2020/10/17/node-modules-configuration-options-with-pnpm</guid>
            <pubDate>Sat, 17 Oct 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[nodemodules ディレクトリを生成する方法は多くあります。 ゆるい nodemodules を作成する方法もありますが、ここでの目標は最も厳格なものを生成することです。]]></description>
            <content:encoded><![CDATA[<p>node_modules ディレクトリを生成する方法は多くあります。 ゆるい node_modules を作成する方法もありますが、ここでの目標は最も厳格なものを生成することです。</p><h2 class="anchor anchorWithStickyNavbar_G0xS" id="デフォルトの構築方法">デフォルトの構築方法<a href="#デフォルトの構築方法" class="hash-link" aria-label="デフォルトの構築方法 への直接リンク" title="デフォルトの構築方法 への直接リンク">​</a></h2><p>デフォルトでは、pnpm v5 は準厳格な node_modules を作成します。 準厳格な場合は、アプリケーションからは<code>package.json</code> に依存として追加されているパッケージのみを require できます。(いくつかの例外を除きます。) ただし、依存関係はどのパッケージにもアクセスすることができます。</p><p>デフォルトの設定は以下のようになります:</p><div class="language-ini codeBlockContainer_qBuI theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_s4cj"><pre tabindex="0" class="prism-code language-ini codeBlock_ZB_v thin-scrollbar"><code class="codeBlockLines_iNkr"><span class="token-line" style="color:#393A34"><span class="token plain">; すべてのパッケージを node_modules/.pnpm/node_modules に巻き上げる</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">hoist-pattern[]=*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">; TypeScript でうまく扱えるように、すべての型定義をルートに巻き上げる</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public-hoist-pattern[]=*types*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">; すべての ESLint に関係するパッケージをルートに巻き上げる</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public-hoist-pattern[]=*eslint*</span><br></span></code></pre><div class="buttonGroup_MJM4"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_rG_2" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_l0xu"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DXTq"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_G0xS" id="プラグアンドプレイ-最も厳格な設定">プラグ・アンド・プレイ。 最も厳格な設定<a href="#プラグアンドプレイ-最も厳格な設定" class="hash-link" aria-label="プラグ・アンド・プレイ。 最も厳格な設定 への直接リンク" title="プラグ・アンド・プレイ。 最も厳格な設定 への直接リンク">​</a></h2><p>pnpm は v5.9 から <a href="https://yarnpkg.com/features/pnp" target="_blank" rel="noopener noreferrer">Yarn の プラグ・アンド・プレイ</a> をサポートしています。 プラグ・アンド・プレイでは、アプリケーションも、その依存も、宣言された依存にのみアクセスできるようになります。 これは、<code>hoist=false</code>の設定よりもさらに厳密です。なぜなら、モノレポの内部では、アプリケーションはルートプロジェクトの依存関係にすらアクセスすることができないからです。</p><p>プラグ・アンド・プレイを使用するには、次の設定を使用してください。</p><div class="language-ini codeBlockContainer_qBuI theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_s4cj"><pre tabindex="0" class="prism-code language-ini codeBlock_ZB_v thin-scrollbar"><code class="codeBlockLines_iNkr"><span class="token-line" style="color:#393A34"><span class="token plain">node-linker=pnp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">symlink=false</span><br></span></code></pre><div class="buttonGroup_MJM4"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_rG_2" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_l0xu"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DXTq"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_G0xS" id="厳格で伝統的なモジュールディレクトリの構造">厳格で伝統的なモジュールディレクトリの構造<a href="#厳格で伝統的なモジュールディレクトリの構造" class="hash-link" aria-label="厳格で伝統的なモジュールディレクトリの構造 への直接リンク" title="厳格で伝統的なモジュールディレクトリの構造 への直接リンク">​</a></h2><p>まだプラグ・アンド・プレイを使用する準備ができていない場合でも、hoist を false に設定することにより、パッケージが自身の依存にのみアクセスできるようにすることが可能です。</p><div class="language-ini codeBlockContainer_qBuI theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_s4cj"><pre tabindex="0" class="prism-code language-ini codeBlock_ZB_v thin-scrollbar"><code class="codeBlockLines_iNkr"><span class="token-line" style="color:#393A34"><span class="token plain">hoist=false</span><br></span></code></pre><div class="buttonGroup_MJM4"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_rG_2" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_l0xu"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DXTq"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>しかし、いくつかの依存が、その依存にないパッケージへのアクセスを試みようとする場合は、2つの方法があります。</p><ol><li><p><code>pnpmfile.js</code> を作成して、<a href="/ja/pnpmfile">hook</a> を使用して不足している依存をパッケージのマニフェストに加える。</p></li><li><p><code>hoist-pattern</code> 設定にパターンを追加する。 例えば、見つからないモジュールが <code>babel-core</code> の場合は、次の設定を <code>.npmrc</code> に追記します。</p><div class="language-ini codeBlockContainer_qBuI theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_s4cj"><pre tabindex="0" class="prism-code language-ini codeBlock_ZB_v thin-scrollbar"><code class="codeBlockLines_iNkr"><span class="token-line" style="color:#393A34"><span class="token plain">hoist-pattern[]=babel-core</span><br></span></code></pre><div class="buttonGroup_MJM4"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_rG_2" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_l0xu"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DXTq"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ol><h2 class="anchor anchorWithStickyNavbar_G0xS" id="最も悪いケース---ルートへの巻き上げ">最も悪いケース - ルートへの巻き上げ<a href="#最も悪いケース---ルートへの巻き上げ" class="hash-link" aria-label="最も悪いケース - ルートへの巻き上げ への直接リンク" title="最も悪いケース - ルートへの巻き上げ への直接リンク">​</a></h2><p>一部のツールは、すべてを仮想ストアのルートに、一部のパッケージをルートに巻き上げる pnpm のデフォルト設定でも機能しない場合があります。 この場合、依存のすべて、または一部をモジュールディレクトリのルートに引き上げることができます。</p><p>node_modules のルートにすべてを巻き上げる場合:</p><div class="language-ini codeBlockContainer_qBuI theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_s4cj"><pre tabindex="0" class="prism-code language-ini codeBlock_ZB_v thin-scrollbar"><code class="codeBlockLines_iNkr"><span class="token-line" style="color:#393A34"><span class="token plain">shamefully-hoist=true</span><br></span></code></pre><div class="buttonGroup_MJM4"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_rG_2" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_l0xu"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DXTq"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>パターンにマッチしたパッケージのみを巻き上げる場合:</p><div class="language-ini codeBlockContainer_qBuI theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_s4cj"><pre tabindex="0" class="prism-code language-ini codeBlock_ZB_v thin-scrollbar"><code class="codeBlockLines_iNkr"><span class="token-line" style="color:#393A34"><span class="token plain">public-hoist-pattern[]=babel-*</span><br></span></code></pre><div class="buttonGroup_MJM4"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_rG_2" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_l0xu"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DXTq"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[フラットな node_modules が唯一の方法ではありません]]></title>
            <link>https://pnpm.io/ja/blog/2020/05/27/flat-node-modules-is-not-the-only-way</link>
            <guid>https://pnpm.io/ja/blog/2020/05/27/flat-node-modules-is-not-the-only-way</guid>
            <pubDate>Wed, 27 May 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[pnpm の新規ユーザーから、pnpm が生成する node_modules の奇妙な構造についてよく聞かれます。 なぜ平坦な構造を使用しないのでしょうか。 依存のさらにその依存はどこにあるのでしょうか。]]></description>
            <content:encoded><![CDATA[<p>pnpm の新規ユーザーから、pnpm が生成する <code>node_modules</code> の奇妙な構造についてよく聞かれます。 なぜ平坦な構造を使用しないのでしょうか。 依存のさらにその依存はどこにあるのでしょうか。</p><blockquote><p>この記事では、npm や Yarn の生成するフラットな <code>node_modules</code> に馴染みのある読者を想定しています。 npm が v3 からフラットな <code>node_modules</code> を採用する必要があった理由については、 <a href="https://www.kochan.io/nodejs/why-should-we-use-pnpm.html" target="_blank" rel="noopener noreferrer">なぜ pnpm が必要なのでしょうか (英語)</a> を参照してください。</p></blockquote><p>では、なぜ pnpm は通常とは異なる構造の <code>node_modules</code> を使用するのでしょう。 試しに 2 つのディレクトリを作成して、片方には <code>npm add express</code> を、もう一方には <code>pnpm add express</code> を実行してみてください。 npm の方のディレクトリにある <code>node_modules</code> は次のようになります。</p><div class="language-text codeBlockContainer_qBuI theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_s4cj"><pre tabindex="0" class="prism-code language-text codeBlock_ZB_v thin-scrollbar"><code class="codeBlockLines_iNkr"><span class="token-line" style="color:#393A34"><span class="token plain">.bin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">accepts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">array-flatten</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">body-parser</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">content-disposition</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cookie-signature</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cookie</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">debug</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">depd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">destroy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ee-first</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">encodeurl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">escape-html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">etag</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">express</span><br></span></code></pre><div class="buttonGroup_MJM4"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_rG_2" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_l0xu"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DXTq"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><a href="https://github.com/zkochan/comparing-node-modules/tree/master/npm-example/node_modules" target="_blank" rel="noopener noreferrer">こちら</a> でディレクトリ全体を確認できます。</p><p>そして、こちらが pnpm が生成する <code>node_modules</code> は次のようになります。</p><div class="language-text codeBlockContainer_qBuI theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_s4cj"><pre tabindex="0" class="prism-code language-text codeBlock_ZB_v thin-scrollbar"><code class="codeBlockLines_iNkr"><span class="token-line" style="color:#393A34"><span class="token plain">.pnpm</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.modules.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">express</span><br></span></code></pre><div class="buttonGroup_MJM4"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_rG_2" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_l0xu"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DXTq"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><a href="https://github.com/zkochan/comparing-node-modules/tree/master/pnpm5-example/node_modules" target="_blank" rel="noopener noreferrer">こちら</a> からディレクトリ全体を確認できます。</p><p>依存のすべてはどこにあるのでしょうか。 <code>node_modules</code> 配下には、フォルダは <code>.pnpm</code> のみが存在し、あとは <code>express</code> という名前のシンボリックリンクです。 今回、 <code>express</code> しかインストールしていないため、アプリケーションからアクセスできるパッケージはこれのみなのです。</p><blockquote><p>pnpm のこの厳格さがどうしていいのか、ということにういては <a href="https://medium.com/pnpm/pnpms-strictness-helps-to-avoid-silly-bugs-9a15fb306308" target="_blank" rel="noopener noreferrer">こちら</a> を参照してください。</p></blockquote><p><code>express</code> の中身がどうなっているか確認してみましょう。</p><div class="language-text codeBlockContainer_qBuI theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_s4cj"><pre tabindex="0" class="prism-code language-text codeBlock_ZB_v thin-scrollbar"><code class="codeBlockLines_iNkr"><span class="token-line" style="color:#393A34"><span class="token plain">▾ node_modules</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ▸ .pnpm</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ▾ express</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ▸ lib</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      History.md</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      index.js</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      LICENSE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      package.json</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      Readme.md</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  .modules.yaml</span><br></span></code></pre><div class="buttonGroup_MJM4"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_rG_2" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_l0xu"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DXTq"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>express</code> の中には <code>node_modules</code> がないのでしょうか。 <code>express</code> の依存のすべてはどこにあるのでしょうか。</p><p><code>express</code> がただのシンボリックリンクであるというところに仕掛けがあります。 Node.js は依存解決をする際に、シンボリックリンクであるかに関わらず、実際のパスを使います。 しかし、今気にしている <code>express</code> の本当の場所はどこなのでしょうか。</p><p>それがここになります: <a href="https://github.com/zkochan/comparing-node-modules/tree/master/pnpm5-example/node_modules/.pnpm/express@4.17.1/node_modules/express" target="_blank" rel="noopener noreferrer">node_modules/.pnpm/express@4.17.1/node_modules/express</a></p><p>これで、<code>.pnpm/</code> フォルダの役割もわかりましたね。 <code>.pnpm/</code> はすべての依存パッケージをフラットなフォルダー構成にして保存し、各依存は次のような命名規則に従ったフォルダに格納されています。</p><div class="language-text codeBlockContainer_qBuI theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_s4cj"><pre tabindex="0" class="prism-code language-text codeBlock_ZB_v thin-scrollbar"><code class="codeBlockLines_iNkr"><span class="token-line" style="color:#393A34"><span class="token plain">.pnpm/&lt;name&gt;@&lt;version&gt;/node_modules/&lt;name&gt;</span><br></span></code></pre><div class="buttonGroup_MJM4"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_rG_2" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_l0xu"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DXTq"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>このディレクトリを仮想ストアと呼んでいます。</p><p>フラットは構造によって、npm v2 によるネストされた <code>node_modules</code> での、パス名が長くなりすぎる問題を解決し、さらに npm v3,4,5,6 や Yarn v1 が生成するフラットな <code>node_modules</code> とは違い、依存パッケージをそれぞれ独立させています。</p><p>今度は本物の <code>express</code> の中身を見てみましょう。</p><div class="language-text codeBlockContainer_qBuI theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_s4cj"><pre tabindex="0" class="prism-code language-text codeBlock_ZB_v thin-scrollbar"><code class="codeBlockLines_iNkr"><span class="token-line" style="color:#393A34"><span class="token plain">  ▾ express</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ▸ lib</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      History.md</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      index.js</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      LICENSE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      package.json</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      Readme.md</span><br></span></code></pre><div class="buttonGroup_MJM4"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_rG_2" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_l0xu"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DXTq"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>これは騙されているんでしょうか？ <code>node_modules</code> はやはりありません！ pnpm の <code>node_modules</code> に対する第二の仕掛けは、パッケージの依存は、それ自身と同じ階層に置かれている点にあります。 <code>express</code> の依存は <code>.pnpm/express@4.17.1/node_modules/express/node_modules/</code> ではなく <a href="https://github.com/zkochan/comparing-node-modules/tree/master/pnpm5-example/node_modules/.pnpm/express@4.17.1/node_modules" target="_blank" rel="noopener noreferrer">.pnpm/express@4.17.1/node_modules/</a> にあります。</p><div class="language-text codeBlockContainer_qBuI theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_s4cj"><pre tabindex="0" class="prism-code language-text codeBlock_ZB_v thin-scrollbar"><code class="codeBlockLines_iNkr"><span class="token-line" style="color:#393A34"><span class="token plain">▾ node_modules</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ▾ .pnpm</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ▸ accepts@1.3.5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ▸ array-flatten@1.1.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ▾ express@4.16.3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ▾ node_modules</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ▸ accepts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ▸ array-flatten</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ▸ body-parser</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ▸ content-disposition</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ▸ etag</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ▾ express</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          ▸ lib</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            History.md</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            index.js</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            LICENSE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            package.json</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Readme.md</span><br></span></code></pre><div class="buttonGroup_MJM4"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_rG_2" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_l0xu"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_DXTq"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>express</code> の依存のすべてはシンボリックリンクであり、それらは <code>node_modules/.pnpm/</code> 内の適切な場所へとリンクされています。 <code>express</code> の依存は1つ上の階層に置くことで、循環したシンボリックリンクになることを回避しています。</p><p>見て分かる通り、pnpm の <code>node_modules</code> の構造は最初は珍しく思えましたが、</p><ol><li>その構造は完全に Node.js 互換なものであり、</li><li>パッケージはその依存とともに適切にグループ化されいます。</li></ol><p>peer dependency がある場合は、構造は <a href="/ja/how-peers-are-resolved">もう少し複雑</a> にはなりますが、それでも考え方は同じです：フラットなディレクトリ構造を利用して、シンボリックリンクによりネストされた構造を生成します。</p>]]></content:encoded>
        </item>
    </channel>
</rss>